from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import re

# Function to initialize the browser
def initialize_browser(url):
    match = re.search(r'www\.amazon\.([a-z\.]+)/.*?/dp/([A-Z0-9]{10})', url)
    if match:
        region = match.group(1)
        asin = match.group(2)
        final_url = f"https://www.amazon.{region}/dp/{asin}"
        print(f"Final URL: {final_url}")
        return final_url
    else:
        print("Could not extract region and ASIN from the URL")
        return None

# Function to extract price details
def get_price_details(driver):
    try:
        price_details = driver.find_element(By.ID, 'corePriceDisplay_desktop_feature_div').text.split('\n')
        discount = price_details[0].strip().replace('-', '')  # Remove the minus sign
        price = price_details[1].strip()                      # Price value
        mrp = price_details[3].strip()                        # MRP value
        
        # Format and print pricing details
        print(f"\033[3m\033[1mPRICING:\033[0m\033[0m")
        print(f"\033[1mMRP :\033[0m {mrp}")
        print(f"\033[1mDiscount :\033[0m {discount}")
        print(f"\033[1mBuying Price :\033[0m {price}")
    except Exception as e:
        print(f"Error getting price details: {e}")

# Function to extract rating and reviews
def get_rating_reviews(driver):
    try:
        reviews_section = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "averageCustomerReviews"))
        )
        num_ratings = reviews_section.find_element(By.XPATH, './/span[@id="acrCustomerReviewText"]').text
        avg_rating = reviews_section.find_element(By.XPATH, '//span[@id="acrPopover"]').get_attribute("title")
        
        # Format and print rating details
        print(f"\n\033[3m\033[1mRATING:\033[0m\033[0m")
        print(f"\033[1mNumber of ratings:\033[0m {num_ratings}")
        print(f"\033[1mAverage rating:\033[0m {avg_rating}")
    except Exception as e:
        print(f"Error getting ratings: {e}")

# Function to extract shipping and seller details
def get_shipping_seller_details(driver):
    try:
        shipping_details = driver.find_element(By.ID, "tabular-buybox").text.split("\n")
        details_dict = {shipping_details[i].strip(): shipping_details[i + 1].strip() for i in range(0, len(shipping_details), 2)}
        
        # Format and print shipping details
        print(f"\n\033[3m\033[1mSHIPPING DETAILS:\033[0m\033[0m")
        for key, value in details_dict.items():
            print(f"\033[1m{key}:\033[0m {value}")
        return details_dict
    except Exception as e:
        print(f"Error getting shipping/seller details: {e}")
        
def replacement(driver):
    # Locate the return/replacement information
        return_replacement_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//span[@class="a-size-small a-color-link a-text-normal"]'))
        )
        return_replacement_text = return_replacement_element.text
        print(f"\033[1mReturn or Replacement :\033[0m {return_replacement_text}")

        


# Function to extract reviews
def extract_reviews(driver, review_type, num_reviews=5):
    print(f"\n\033[3m\033[1m{review_type} REVIEWS:\033[0m\033[0m")
    for i in range(2, 2 + num_reviews):
        try:
            title = driver.find_element(By.XPATH, f'/html/body/div[1]/div[2]/div/div[1]/div/div[1]/div[5]/div[3]/div/div[{i}]/div/div/div[2]/a/span[2]').text
            print(f"\033[1mTitle :\033[0m {title}")
            review = driver.find_element(By.XPATH, f'/html/body/div[1]/div[2]/div/div[1]/div/div[1]/div[5]/div[3]/div/div[{i}]/div/div/div[4]/span/span').text
            print(f"\033[1mReview :\033[0m {review}")
            reviewed_on = driver.find_element(By.XPATH, f'/html/body/div[1]/div[2]/div/div[1]/div/div[1]/div[5]/div[3]/div/div[{i}]/div/div/span').text
            print(f"\033[1mReviewed on :\033[0m {reviewed_on}\n{'*' * 50}")
        except Exception as e:
            print(f"Error getting {review_type.lower()} reviews: {e}")

# Main script execution
if __name__ == "__main__":
    url = input("Enter Product Link: ")
    final_url = initialize_browser(url)

    if final_url:
        driver = webdriver.Chrome()
        driver.get(final_url)
        time.sleep(3)

        # Get price details
        get_price_details(driver)

        # Get rating and reviews
        get_rating_reviews(driver)
        
        # get replacement_details 
        replacement(driver)

        # Get shipping and seller details
        details_dict = get_shipping_seller_details(driver)

        # Click on "Sold by" link
        sold_by_link = driver.find_element(By.LINK_TEXT, details_dict.get('Sold by', ''))
        if sold_by_link:
            sold_by_link.click()
            # Get T12M ratings
            t12m_ratings = driver.find_element(By.XPATH, '//*[@id="seller-info-feedback-summary"]/span/a').text
            print(f"\033[1mPast 1 year seller rating:\033[0m {t12m_ratings}")
        driver.get(final_url)

        # Click on 5-star reviews and extract top 5 verified purchases
        driver.find_element(By.XPATH, '//*[@id="histogramTable"]/li[1]/span/a').click()
        time.sleep(3)
        driver.find_element(By.XPATH, '//*[@id="a-autoid-4-announce"]/span').click()
        time.sleep(3)
        driver.find_element(By.XPATH, '//*[@id="reviewer-type-dropdown_1"]').click()
        time.sleep(3)
        extract_reviews(driver, "5-STAR")

        # Extract critical reviews
        driver.find_element(By.XPATH, '//*[@id="a-autoid-5-announce"]/span').click()
        time.sleep(3)
        driver.find_element(By.XPATH, '//*[@id="star-count-dropdown_7"]').click()
        time.sleep(3)
        extract_reviews(driver, "CRITICAL")

        # Extract 1-star reviews
        driver.find_element(By.XPATH, '//*[@id="a-autoid-5-announce"]/span').click()
        time.sleep(3)
        driver.find_element(By.XPATH, '//*[@id="star-count-dropdown_5"]').click()
        time.sleep(3)
        extract_reviews(driver, "1-STAR")

        driver.quit()
